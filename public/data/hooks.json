[
    {
      "id": "1",
      "component" : "useState",
      "imageUrl" : "images/useState.png",
      "title" : "Use State",
      "description" : "Description about Use state",
      "details": [
        "import React, { useState } from \"react\";",
        "const StateComponent = () => {",
        "const [isGreen, setIsGreen] =useState(true);",
        "return (",
        "<h1",
        "onClick={() =>setIsGreen(!isGreen)}",
        "style={{ color:isGreen ? \"limegreen\" : \"crimson\" }}",
        ">",
        "useState Example",
        "</h1>",
        ");",
        "};",
        "export default StateComponent;"
      ]
    },
    {
        "id": "2",
        "component" : "useEffect",
        "imageUrl" : "images/useEffect.jpg",
        "title" : "Use Effect",
        "description" : "Description about Use effects",
        "details": [
            "import React, { useState, useEffect } from \"react\";",
            "const EffectComponent = () => {",
            "const [time, setTime] =useState(newDate());",
            "useEffect(() => {",
            "consttimer=setTimeout(() =>setTime(newDate()), 1000);",
            "return () =>clearTimeout(timer);",
            "});",
            "return<h1>useEffect Example: {time.toLocaleTimeString()}</h1>;",
            "};",
            "export default EffectComponent;"
        ]
      },
      {
          "id": "3",
          "component" : "useContext",
          "imageUrl" : "images/useContext.png",
          "title" : "Use Context",
          "description" : "Description about Use contexts",
          "details": [
            "import React, { useState, useContext, createContext } from \"react\";",
            "const UserContext = createContext([",
            "{",
            "firstName:\"Bob\",",
            "lastName:\"Bobberson\",",
            "suffix:1,",
            "email:\"bobbobberson@example.com\"",
            "},",
            "obj=>obj",
            "]);",
            "const LevelFive = () => {",
            "const [user, setUser] =useContext(UserContext);",
            "return (",
            "<div>",
            "<h5>{`${user.firstName}${user.lastName} the ${user.suffix} born`}</h5>",
            "<button",
            "onClick={() => {",
            "setUser(Object.assign({} , user, { suffix:user.suffix + 1 }));",
            "}}",
            ">",
            "Increment",
            "</button>",
            "</div>",
            ");",
            "};",
            "const LevelFour = () => (",
            "<div>",
            "<h4>fourth level</h4>",
            "<LevelFive/>",
            "</div>",
            ");",
            "const LevelThree = () => (",
            "<div>",
            "<h3>third level</h3>",
            "<LevelFour/>",
            "</div>",
            ");",
            "const LevelTwo = () => (",
            "<div>",
            "<h2>second level</h2>",
            "<LevelThree/>",
            "</div>",
            ");",
            "const ContextComponent = () => {",
            "constuserState=useState({",
            "firstName:\"James\",",
            "lastName:\"Jameson\",",
            "suffix:1,",
            "email:\"jamesjameson@example.com\"",
            "});",
            "return (",
            "<UserContext.Providervalue={userState}>",
            "<h1>first level</h1>",
            "<LevelTwo/>",
            "</UserContext.Provider>",
            ");",
            "};",
            "export default ContextComponent;"
          ]
        },
        {
          "id": "4",
          "component" : "useRef",
          "imageUrl" : "images/useRef.png",
          "title" : "Use Ref",
          "description" : "Description about Use ref",
          "details": [
            "import React, { useState, useEffect, useRef } from \"react\";",
            "const RefComponent = () => {",
            "const[stateNumber, setStateNumber] =useState(0);",
            "constnumRef=useRef(0);",
            "functionincrementAndDelayLogging(){",
            "setStateNumber(stateNumber+1);",
            "numRef.current++;",
            "setTimeout(",
            "()=>alert(`state: ${stateNumber} | ref: ${numRef.current}`),",
            "1000",
            ");",
            "}",
            "return(",
            "<div>",
            "<h1>useRef Example</h1>",
            "<button onClick={incrementAndDelayLogging}>delay logging</button>",
            "<h4>state: {stateNumber}</h4>",
            "<h4>ref: {numRef.current}</h4>",
            "</div>",
            ");",
            "};",
            "export default RefComponent;"
          ]
        },
        {
          "id": "5",
          "component" : "useReducer",
          "imageUrl" : "images/useReducer.png",
          "title" : "Use Reducer",
          "description" : "Description about Use reducer",
          "details":  [
            "import React, { useReducer } from \"react\";",
            "// fancy logic to make sure the number is between 0 and 255",
            "const limitRGB = num => (num < 0 ? 0 : num > 255 ? 255 : num);",
            "const step = 50;",
            "const reducer = (state, action) => {",
            "switch(action.type){",
            "case\"INCREMENT_R\":",
            "returnObject.assign({},state,{ r:limitRGB(state.r+step)});",
            "case\"DECREMENT_R\":",
            "returnObject.assign({},state,{ r:limitRGB(state.r-step)});",
            "case\"INCREMENT_G\":",
            "returnObject.assign({},state,{ g:limitRGB(state.g+step)});",
            "case\"DECREMENT_G\":",
            "returnObject.assign({},state,{ g:limitRGB(state.g-step)});",
            "case\"INCREMENT_B\":",
            "returnObject.assign({},state,{ b:limitRGB(state.b+step)});",
            "case\"DECREMENT_B\":",
            "returnObject.assign({},state,{ b:limitRGB(state.b-step)});",
            "default:",
            "returnstate;",
            "}",
            "};",
            "const ReducerComponent = () => {",
            "const[{ r, g, b }, dispatch] =useReducer(reducer,{ r:0, g:0, b:0});",
            "return(",
            "<div>",
            "<h1 style={{ color: `rgb(${r}, ${g}, ${b})` }}>useReducer Example</h1>",
            "<div>",
            "<span>r</span>",
            "<button onClick={() => dispatch({ type: \"INCREMENT_R\" })}>➕</button>",
            "<button onClick={() => dispatch({ type: \"DECREMENT_R\" })}>➖</button>",
            "</div>",
            "<div>",
            "<span>g</span>",
            "<button onClick={() => dispatch({ type: \"INCREMENT_G\" })}>➕</button>",
            "<button onClick={() => dispatch({ type: \"DECREMENT_G\" })}>➖</button>",
            "</div>",
            "<div>",
            "<span>b</span>",
            "<button onClick={() => dispatch({ type: \"INCREMENT_B\" })}>➕</button>",
            "<button onClick={() => dispatch({ type: \"DECREMENT_B\" })}>➖</button>",
            "</div>",
            "</div>",
            ");",
            "};",
            "export default ReducerComponent;"
          ]
        },
        {
          "id": "6",
          "component" : "useMemo",
          "imageUrl" : "images/useMemo.png",
          "title" : "Use Memo",
          "description" : "Description about Use Memo",
          "details": [
            "import React, { useState, useMemo } from \"react\";",
            "const fibonacci = n => {",
            "if(n<=1){",
            "return1;",
            "}",
            "returnfibonacci(n-1)+fibonacci(n-2);",
            "};",
            "const MemoComponent = () => {",
            "const[num, setNum] =useState(1);",
            "const[isGreen, setIsGreen] =useState(true);",
            "constfib=useMemo(()=>fibonacci(num),[num]);",
            "return(",
            "<div>",
            "<h1",
            "onClick={() =>setIsGreen(!isGreen)}",
            "style={{ color: isGreen ? \"limegreen\" : \"crimson\" }}",
            ">",
            "useMemo Example",
            "</h1>",
            "<h2>",
            "Fibonacci of {num} is {fib}",
            "</h2>",
            "<button onClick={() => setNum(num + 1)}>➕</button>",
            "</div>",
            ");",
            "};",
            "export default MemoComponent;"
          ]
        },
        {
          "id": "7",
          "component" : "useCallback",
          "imageUrl" : "images/useCallback.jpg",
          "title" : "Use Callback",
          "description" : "Description about Use Callback",
          "details":  [
            "import React, { useState, useEffect, useCallback, memo } from \"react\";",
            "const ExpensiveComputationComponent = memo(({ compute, count }) => {",
            "return(",
            "<div>",
            "<h1>computed: {compute(count)}</h1>",
            "<h4>last re-render {new Date().toLocaleTimeString()}</h4>",
            "</div>",
            ");",
            "});",
            "const CallbackComponent = () => {",
            "const[time, setTime] =useState(newDate());",
            "const[count, setCount] =useState(1);",
            "useEffect(()=>{",
            "consttimer=setTimeout(setTime(newDate()),1000);",
            "return()=>clearTimeout(timer);",
            "});",
            "constfibonacci=n=>{",
            "if(n<=1){",
            "return1;",
            "}",
            "returnfibonacci(n-1)+fibonacci(n-2);",
            "};",
            "return(",
            "<div>",
            "<h1>useCallback Example {time.toLocaleTimeString()}</h1>",
            "<button onClick={() => setCount(count + 1)}>",
            "current count: {count}",
            "</button>",
            "<ExpensiveComputationComponent",
            "compute={useCallback(fibonacci, [])}",
            "count={count}",
            "/>",
            "</div>",
            ");",
            "};",
            "export default CallbackComponent;"
          ]
        },
        {
          "id": "8",
          "component" : "useLayoutEffect",
          "imageUrl" : "images/useLayoutEffect.png",
          "title" : "Use LayoutEffect",
          "description" : "Description about Use LayoutEffect",
          "details":   [
            "import React, { useState, useLayoutEffect, useRef } from \"react\";",
            "const LayoutEffectComponent = () => {",
            "const[width, setWidth] =useState(0);",
            "const[height, setHeight] =useState(0);",
            "constel=useRef();",
            "useLayoutEffect(()=>{",
            "setWidth(el.current.clientWidth);",
            "setHeight(el.current.clientHeight);",
            "});",
            "return(",
            "<div>",
            "<h1>useLayoutEffect Example</h1>",
            "<h2>textarea width: {width}px</h2>",
            "<h2>textarea height: {height}px</h2>",
            "<textarea",
            "onClick={() => {",
            "setWidth(0);",
            "}}",
            "ref={el}",
            "/>",
            "</div>",
            ");",
            "};",
            "export default LayoutEffectComponent;"
          ]
        }
]